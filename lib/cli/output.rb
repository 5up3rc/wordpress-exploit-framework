module Cli
  # Methods for handling output to the screen.
  module Output
    include Cli::TableOutputHelper

    def indent_cursor(level = 1)
      @indent_level += level
      yield
      @indent_level -= level
    end

    def remove_new_lines_and_wrap_text(s, padding = 0, width = 78)
      s.tr("\n", '')
       .gsub(/(.{1,#{width}})(\s+|\Z)/, "\\1\n#{@indent * @indent_level}#{' ' * padding}").chomp
       .gsub(/\s+$/, '')
    end

    def wrap_text(s, padding = 0, width = 78)
      s.gsub(/(.{1,#{width}})(\s+|\Z)/, "\\1\n#{@indent * @indent_level}#{' ' * padding}").chomp
       .gsub(/\s+$/, '')
    end

    def indent_without_wrap(s)
      s.gsub(/\n/, "\n#{@indent * @indent_level}")
    end

    def print_std(msg)
      puts "#{@indent * @indent_level}#{msg}"
    end

    def print_info(msg)
      print "#{@indent * @indent_level}[-] ".light_blue
      puts wrap_text(msg, 4, 90)
    end

    def print_good(msg)
      print "#{@indent * @indent_level}[+] ".green
      puts wrap_text(msg, 4, 90)
    end

    def print_bad(msg)
      print "#{@indent * @indent_level}[!] ".red
      puts wrap_text(msg, 4, 90)
    end

    def print_warning(msg)
      print "#{@indent * @indent_level}[!] ".yellow
      puts wrap_text(msg, 4, 90)
    end

    def print_table(data, pad_with_new_lines = false)
      print build_table(data, pad_with_new_lines)
    end

    def print_socket(data)
      print data
    end
  end
end
