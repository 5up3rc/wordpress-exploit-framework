import { Injectable }                    from '@angular/core';
import { Headers, Http, RequestOptions } from '@angular/http';

import { Session } from './session';
import { SessionEvent } from './session-event';

import { Observable } from 'rxjs/Rx';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';

@Injectable()
export class SessionService {
  private headers = new Headers({ 'Content-Type': 'application/json' });
  private baseUri = '/api/sessions';

  constructor(private http: Http) { }

  getSessions(): Promise<Session[]> {
    return this.http
      .get(this.baseUri)
      .toPromise()
      .then(response => response.json() as Session[])
      .catch(this.handleError);
  }

  getSession(id: number): Promise<Session> {
    return this.http
      .get(`${this.baseUri}/${id}`)
      .toPromise()
      .then(response => response.json() as Session)
      .catch(this.handleError);
  }

  getEventObserver(sessionId: number, lastEventId: number): Observable<SessionEvent[]> {
    return this.http
      .get(`${this.baseUri}/${sessionId}/events/${lastEventId}`)
      .map(response => response.json());
  }

  sendData(sessionId: number, data: string): Observable<any> {
    return this.http
      .post(`${this.baseUri}/${sessionId}/data`, { data: data })
      .map(response => response.json());
  }

  kill(sessionId: number): Observable<any> {
    return this.http
      .post(`${this.baseUri}/${sessionId}/kill`, {})
      .map(response => response.json());
  }

  private handleError(error: any): Promise<any> {
    console.error('An error occurred', error);
    return Promise.reject(error.message || error);
  }
}
