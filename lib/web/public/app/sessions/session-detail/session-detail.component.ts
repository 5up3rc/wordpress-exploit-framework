import { Component, OnInit, Input }      from '@angular/core';
import { FormsModule }       from '@angular/forms';
import { ActivatedRoute, Params } from '@angular/router';

import { Session } from '../shared/session';
import { SessionEvent } from '../shared/session-event';
import { SessionService } from '../shared/session.service';

import { Observable, Subscription } from 'rxjs/Rx';
import 'rxjs/add/operator/map';

@Component({
  selector: 'session-detail',
  moduleId: module.id,
  templateUrl: 'session-detail.component.html',
  styleUrls: ['session-detail.component.css']
})

export class SessionDetailComponent implements OnInit {
  private paramsSubscription: any;
  private session: Session = new Session();
  private lastEventId: number = 0;
  private eventSubscription: Subscription;
  private events: SessionEvent[] = [];
  private ending: boolean = false;

  @Input() input: string;

  constructor(
    private route: ActivatedRoute,
    private sessionService: SessionService) {
  }

  ngOnInit(): void {
    this.paramsSubscription = this.route.params.subscribe(params => {
      this.sessionService
        .getSession(params['id'])
        .then(this.load.bind(this));
    });
  }

  ngOnDestroy(): void {
    if (this.paramsSubscription) { this.paramsSubscription.unsubscribe(); }
    if (this.eventSubscription)  { this.eventSubscription.unsubscribe(); }
  }

  load(session: Session): void {
    this.session = session;
    this.session.events.forEach(e => this.addNewEvent(e));

    if (this.session.active) {
      this.eventSubscription = Observable
        .interval(1000)
        .flatMap(() => this.sessionService.getEventObserver(this.session.id, this.lastEventId))
        .subscribe(this.addNewEvents.bind(this));
    }
  }

  addNewEvent(event: SessionEvent): void {
    let last = this.events[this.events.length - 1];
    this.lastEventId = event.id;

    if (last && last.level == '5' && event.level == '5') {
      last.message += event.message;
    }
    else if (last && last.level == '5' && event.level == '6') {
      last.message += `${event.message}\n`;
    }
    else {
      this.events.push(event);
    }
  }

  addNewEvents(events: SessionEvent[]): void {
    if (!events) return;
    events.forEach(e => this.addNewEvent(e));
  }

  sendData(): void {
    console.log(`Sending ${this.input}`);
    this.sessionService
      .sendData(this.session.id, this.input)
      .subscribe(this.handleDataResult.bind(this));
  }

  handleDataResult(result: any): void {
    this.input = '';
  }

  endSession(): void {
    this.ending = true;
    this.sessionService
      .kill(this.session.id)
      .subscribe(this.sessionClosed.bind(this));
  }

  sessionClosed(e: any): void {
    this.ending = false;
    this.session.active = false;
  }
}
