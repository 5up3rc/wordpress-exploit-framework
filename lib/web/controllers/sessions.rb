module Web
  module Controllers
    # Controller to handle all routes relating to module sessions.
    class Sessions < Base
      get '/' do
        json Web::Models::Session.all.map(&:values)
      end

      get '/:session_id' do
        session = Web::Models::Session.first(id: params['session_id'])
        halt 404 unless session

        json(
          id: session.id,
          module_path: session.module_path,
          created_at: session.created_at,
          events: session.events.order(:id).all.map(&:values)
        )
      end

      get '/:session_id/events/:min_id' do
        session = Web::Models::Session.first(id: params['session_id'])
        halt 404 unless session
        json session.events.where('id > ?', params['min_id']).order(:id).all.map(&:values)
      end

      post '/:session_id/kill' do
        session = find_session(params['session_id'])
        Sessions.active_sessions.delete(session)
        session[:module].kill
      end

      post '/:session_id/data' do
        session = find_session(params['session_id'])
        halt 404 unless session

        create_socket_input_event(params['session_id'], params['data'])
        session[:module].payload.socket_input_stream = StringIO.new("#{params['data']}\n")
        json(success: true)
      end

      def create_socket_input_event(session_id, data)
        session = Web::Models::Session.first(id: session_id)
        Web::Models::SessionEvent.create(message: data, level: :socket_input, session_id: session.id)
      end

      def find_session(id)
        session = Sessions.active_sessions.find { |s| s[:id].to_s == id.to_s }
        halt 404 unless session
        session
      end

      def self.active_sessions
        @@active_sessions ||= []
      end

      def self.kill_active_sessions
        Sessions.active_sessions.each do |session|
          session[:module].kill
        end
      end
    end
  end
end
