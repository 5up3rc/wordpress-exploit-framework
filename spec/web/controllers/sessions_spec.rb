require_relative '../../spec_helper'

describe Web::Controllers::Sessions do
  let(:app) { described_class }

  it_behaves_like 'a route controller'

  describe 'GET /' do
    it 'returns a blank JSON array if no sessions exist' do
      get '/'
      expect(last_response.body).to eq '[]'
    end

    it 'returns all sessions as JSON' do
      session = Web::Models::Session.new
      session.module_path = 'exploit/name'
      session.save

      get '/'
      expect(last_response.body).to eq Web::Models::Session.all.map(&:values).to_json
    end
  end

  describe 'GET /:session_id' do
    context 'when the session is inactive' do
      it 'returns the requested session with the active property set to false' do
        Web::Controllers::Sessions.active_sessions.clear
        session = Web::Models::Session.new
        session.module_path = 'exploit/name'
        session.save

        expected_object = {
          id: session.id,
          module_path: session.module_path,
          created_at: session.created_at,
          events: [],
          active: false
        }

        get "/#{session.id}"
        expect(last_response.body).to eq expected_object.to_json
      end
    end

    context 'when the session is active' do
      it 'returns the requested session with the active property set to true' do
        session = Web::Models::Session.new
        session.module_path = 'exploit/name'
        session.save

        Web::Controllers::Sessions.active_sessions.push(id: session.id)

        expected_object = {
          id: session.id,
          module_path: session.module_path,
          created_at: session.created_at,
          events: [],
          active: true
        }

        get "/#{session.id}"
        expect(last_response.body).to eq expected_object.to_json
      end
    end

    it 'sets the response status to 404 if the session does not exist' do
      get '/9001'
      expect(last_response.not_found?).to be true
    end
  end

  describe 'GET /:session_id/events/:min_id' do
    it 'sets the response status to 404 if the session does not exist' do
      get '/9001'
      expect(last_response.not_found?).to be true
    end

    it 'returns all events with an id greater than the one specified' do
      session = Web::Models::Session.create(module_path: 'exploit/name')
      10.times { Web::Models::SessionEvent.create(session_id: session.id, message: 'msg', level: :info, verbose: 0) }

      get "/#{session.id}/events/5"
      events = JSON.parse(last_response.body)

      expect(events.count).to eq 5
    end
  end
end
